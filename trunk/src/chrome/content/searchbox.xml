<?xml version="1.0"?>

<!DOCTYPE bindings SYSTEM "chrome://@NAME@/locale/searchwp.dtd">

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is SearchWP.
   -
   - The Initial Developer of the Original Code is
   -  Georges-Etienne Legendre <legege@legege.com> <http://legege.com>.
   - Portions created by the Initial Developer are Copyright (C) 2004-2008.
   - All Rights Reserved.
   -
   - Contributor(s):
   -  DÃ£o Gottwald <dao@design-noir.de> (source of LocationBar^2)
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <!-- SearchBox Binding -->
  <binding id="searchbox" extends="chrome://browser/content/search/search.xml#searchbar-textbox">
    <resources>
      <stylesheet src="chrome://@NAME@/skin/searchbox.css" />
      <stylesheet src="chrome://@NAME@-platform/skin/searchbox.css" />
    </resources>

    <implementation>
      <constructor><![CDATA[
        if (document.getBindingParent(this).parentNode.parentNode.localName == "toolbarpaletteitem") {
          return;
        }
        setTimeout(function(a) {
          a.initializeSearchWP();
        }, 0, this);
      ]]></constructor>

      <destructor><![CDATA[
        this.tearDownSearchWP();
      ]]></destructor>

      <field name="_tokenProto"><![CDATA[
        var node = document.createElement("label");
        node.className = "searchbox-token";
        node.setAttribute("mousethrough", "never");
        node;
      ]]></field>

      <field name="_cropped">false</field>
      <field name="_displayMode">0</field>

      <property name="cropped" onget="return this._cropped;">
        <setter><![CDATA[
          this._cropped = val;
          if (gSearchWP.Preferences.tokensDisplayMode == 2) {
            this._embeddedActionsLayer.collapsed = !val;
          }
          return val;
        ]]></setter>
      </property>

      <method name="findByAttr">
         <parameter name="root" />
         <parameter name="attrName" />
         <parameter name="value" />
         <body><![CDATA[
            var i, node, list;

            node = document.getAnonymousElementByAttribute( root, attrName, value );

            if ( node ) {
              return node;
            }

            list = document.getAnonymousNodes( root );

            if ( list ) {
              for ( i = 0; root = list[i]; ++i ) {
                if ( root.nodeType === 1 ) {
                  node = this.findByAttr( root, attrName, value );

                  if ( node ) {
                    return node;
                  }
                }
              }
            }

            return null;
         ]]></body>
      </method>

       <method name="buildTree">
         <parameter name="name" />
         <parameter name="attrMap" />
         <parameter name="childs" />
         <body><![CDATA[
          var m = /^(\w+)(?:#([\w\-]+))?(?:\.([\w\-\.]+))?$/.exec( name );

          var node = document.createElement( m[1] );

          for ( var attr in attrMap ) {
            node.setAttribute( attr, attrMap[ attr ] );
          }

          if ( m[2] ) {
            node.setAttribute( "anonid", m[2] );
            var fieldName = "_" + m[2].replace(/\-(\w)/g, function(_, c) {
              return c.toUpperCase();
            });
            this[ fieldName ] = node;
          }

          if ( m[3] ) {
            node.setAttribute( "class", m[3].split(".").join(" ") );
          }

          node._bindingRoot = this;

          if ( childs ) {
            childs = !childs.nodeType ? childs : Array.slice( arguments, 2 );
            for ( var i = 0; childs[i]; ++i ) {
              node.appendChild( childs[i] );
            }
          }

          return node;
         ]]></body>
      </method>

      <method name="initializeSearchWPContent">
        <body><![CDATA[
          var self = this;
          var _ = function(){ return self.buildTree.apply( self, arguments ) };

          this._input = this.findByAttr( this, "anonid", "input" );
          var textboxInputBox = this._input.parentNode;

          textboxInputBox.appendChild(
            _("stringbundle#searchwp-string-bundle", { src: "chrome://@NAME@/locale/searchbox.properties" })
          );

          textboxInputBox.appendChild(
            // Tokens layer
            _('hbox#tokens-layer.searchbox-tokens-layer', {
                 flex: "1", collapsed: "true",
                 onmousedown: "this._bindingRoot.select();"
              },
                _('scrollbox#tokens-container.searchbox-tokens-container', {
                  flex: "1",
                  onoverflow: "this._bindingRoot.cropped = true;",
                  onunderflow: "this._bindingRoot.cropped = false;"
                })
            )
          );

          textboxInputBox.appendChild(
            // Embedded actions layer (e.g. menu)
            _('hbox#embedded-actions-layer.searchbox-embedded-actions-layer', {
                 flex: "1", mousethrough: "always", align: "right", collapsed: "true"
              },
                _('image#tokens-menu-button.searchbox-tokens-menu-button', {
                  mousethrough: "never",
                  onclick: "this._bindingRoot.openTokensMenuPopup(event);",
                  tooltiptext: this._searchwpStringBundle.getString("tokensMenuTooltiptext")
                })
            )
          );

          textboxInputBox.appendChild(
            _('panel#tokens-menu-popup.searchbox-tokens-menu-popup', { onclick: "event.stopPropagation();" },
                _('vbox#tokens-menu-popup-container.searchbox-tokens-menu-popup-container')
            )
          );
        ]]></body>
      </method>

      <method name="initializeSearchWP">
        <body><![CDATA[
          this.initializeSearchWPContent();

          this._displayMode = gSearchWP.Preferences.tokensDisplayMode;

          var self = this;

          var observer = this._SearchWPObservers = {
            observe: function( aSubject, aTopic, aData ) {
               // If any pref changed, we need to rebuild tokens to adjust presentation
               self._rebuildTokens( self.value );
            }
          };

          // Register observer...
          gSearchWP.Preferences.addObserver(gSearchWP.Preferences.PREF_TOKENS_DISPLAY_MODE, observer);
          gSearchWP.Preferences.addObserver(gSearchWP.Preferences.PREF_HIGHLIGHT_STATE, observer);
          gSearchWP.Preferences.addObserver(gSearchWP.Preferences.PREF_HIGHLIGHT_MINLENGTH, observer);
        ]]></body>
      </method>

      <method name="tearDownSearchWP">
        <body><![CDATA[
          var observer = this._SearchWPObservers;
          if ( observer ) {
            // Unregister observer...
            gSearchWP.Preferences.removeObserver(gSearchWP.Preferences.PREF_TOKENS_DISPLAY_MODE, observer);
            gSearchWP.Preferences.removeObserver(gSearchWP.Preferences.PREF_HIGHLIGHT_STATE, observer);
            gSearchWP.Preferences.removeObserver(gSearchWP.Preferences.PREF_HIGHLIGHT_MINLENGTH, observer);
            this._SearchWPObservers = null;
          }
        ]]></body>
      </method>

      <method name="onBeforeValueSet">
        <parameter name="aValue"/>
        <body><![CDATA[
          this._rebuildTokens(aValue);
          return aValue;
        ]]></body>
      </method>

      <method name="openTokensMenuPopup">
        <parameter name="aEvent" />
        <body><![CDATA[
          if (aEvent.button != 0) {
            return;
          }
          aEvent.stopPropagation();

          // Adjust token visibility
          var tokensScrollBoxObject = this._tokensContainer.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject);
          var rightLimitX = tokensScrollBoxObject.x + tokensScrollBoxObject.width - this._calculateEmbeddedActionsWidth();

          for (var i = 0; i < this._tokensContainer.childNodes.length; i++) {
            var tokenNode = this._tokensContainer.childNodes[i];
            var tokenPopupNode = this._tokensMenuPopupContainer.childNodes[i];
            if (this._tokensLayer.hidden || (tokenNode.boxObject.x + tokenNode.boxObject.width) > rightLimitX) {
              tokenPopupNode.style.display = "-moz-box";
            }
            else {
              tokenPopupNode.style.display = "none";
            }
          }

          var popup = document.getAnonymousElementByAttribute(this, "anonid", "tokens-menu-popup");
          popup.hidden = false;
          popup.openPopup(this._embeddedActionsLayer, 'after_end');
        ]]></body>
      </method>

      <method name="_rebuildTokens">
        <parameter name="aValue"/>
        <body><![CDATA[
          // Set the display mode attribute (for CSS)
          this.setAttribute("tokensdisplaymode", gSearchWP.Preferences.tokensDisplayMode);

          // Removes all tokens
          while (this._tokensContainer.hasChildNodes()) {
            this._tokensContainer.removeChild(this._tokensContainer.firstChild);
          }
          while (this._tokensMenuPopupContainer.hasChildNodes()) {
            this._tokensMenuPopupContainer.removeChild(this._tokensMenuPopupContainer.firstChild);
          }

          if (aValue) {
            var tokensScrollBoxObject = this._tokensContainer.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject);

            // Create an array of terms and we add them to the tokens layer and the tokens popup
            var termsArray = gSearchWP.Tokenizer.createTokensArray(aValue);
            for (var i = 0, j = 0; i < termsArray.length; i++) {
              var tokenNode = this._tokenProto.cloneNode(true);
              tokenNode.value = termsArray[i];
              tokenNode.setAttribute("tooltiptext", this._searchwpStringBundle.getFormattedString("tokenTooltiptext", [termsArray[i]], 1));

              if (gSearchWP.Preferences.highlighted && termsArray[i].length >= gSearchWP.Preferences.highlightMinLength) {
                var criteria = "term-" + ((j++ % gSearchWP.Preferences.highlighterCount) + 1);
                tokenNode.setAttribute("highlight", criteria);
              }

              this._tokensContainer.appendChild(tokenNode);

              // We add all tokens in the popup menu too.
              var tokenPopupNode = tokenNode.cloneNode(true);
              this._tokensMenuPopupContainer.appendChild(tokenPopupNode);
            }

            gSearchWP.Highlighting.update(termsArray);
          }
          else {
            gSearchWP.Highlighting.update();
          }

          if (aValue && !this.hasAttribute("focused")) {
            this._showTokens(aValue);
          }
          else {
            this._hideTokens();
          }
        ]]></body>
      </method>

      <method name="_showTokens">
        <parameter name="aValue"/>
        <body><![CDATA[
          // Should only show tokens when they're already shown, and
          // if the tokens display mode hasn't changed.
          if (aValue && (!this.hasAttribute("tokenized")
                         || this._displayMode != gSearchWP.Preferences.tokensDisplayMode)) {
            if (gSearchWP.Preferences.tokensDisplayMode == 2) { // Overlay
              this._embeddedActionsLayer.collapsed = true;
              this._input.style.maxWidth = "0";
              this._tokensLayer.collapsed = false;
            }
            else if (gSearchWP.Preferences.tokensDisplayMode == 3) { // Complete menu
              this._tokensLayer.collapsed = true;
              this._embeddedActionsLayer.collapsed = false;
              this._input.style.maxWidth = "none";
            }
            else { // Disabled
              this._embeddedActionsLayer.collapsed = true;
              this._tokensLayer.collapsed = true;
              this._input.style.maxWidth = "none";
            }

            this._displayMode = gSearchWP.Preferences.tokensDisplayMode;

            // Compatibility warning: The Searchbar Autosizer extension depends on
            // the "tokenized" attribute to automatically adjust the width of the search box
            this.setAttribute("tokenized", true);

            var event = document.createEvent('Events');
            event.initEvent('tokenized', true, true);
            this.dispatchEvent(event);
          }
        ]]></body>
      </method>

      <method name="_hideTokens">
        <body><![CDATA[
          if (this.hasAttribute("tokenized")) {
            if (gSearchWP.Preferences.tokensDisplayMode == 3) {  // Complete menu
              this._embeddedActionsLayer.collapsed = false;
            }
            else {
              this._embeddedActionsLayer.collapsed = true;
            }
            this._tokensLayer.collapsed = true;
            this._input.style.maxWidth = "none";

            this.removeAttribute("tokenized");
            this._displayMode = 0;

            var event = document.createEvent('Events');
            event.initEvent('untokenized', true, true);
            this.dispatchEvent(event);
          }
          else {
            if (gSearchWP.Preferences.tokensDisplayMode == 3) {  // Complete menu
              this._embeddedActionsLayer.collapsed = !(this._tokensMenuPopupContainer.childNodes.length > 0);
            }
          }
        ]]></body>
      </method>

      <method name="_calculateEmbeddedActionsWidth">
        <body><![CDATA[
          var width = 0;
          for (var i = 0; i < this._embeddedActionsLayer.childNodes.length; i++) {
            var element = this._embeddedActionsLayer.childNodes[i];
            if (!element.hidden) {
              width += element.boxObject.width
            }
          }
          return width;
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="input" action="this._rebuildTokens(this.value)" />

      <handler event="focus" phase="capturing">this._hideTokens();</handler>
      <handler event="blur" phase="capturing">this._showTokens(this.value);</handler>
      <handler event="dragover" phase="capturing">this._hideTokens();</handler>
      <handler event="dragexit" phase="capturing">this._showTokens(this.value);</handler>
    </handlers>
  </binding>

  <!-- Token Binding -->
  <binding id="searchbox-token" display="xul:hbox">
    <content>
      <xul:label class="searchbox-token-label" anonid="label" />
    </content>

    <implementation>
      <field name="_notFoundTimeout" />

      <property name="value" onget="return this.getAttribute('value');">
        <setter><![CDATA[
          this.setAttribute("value", val);
          document.getAnonymousElementByAttribute(this, "anonid", "label").value = val;
          return val;
        ]]></setter>
      </property>

      <method name="_findFast">
        <parameter name="aFindBackwards" />
        <parameter name="aMatchCase" />
        <body><![CDATA[
          // To handle F3 correctly, we have to clear this find bar search.
          // See chrome://global/content/bindings/findbar.xml#findbar-textbox for more info
          if (gFindBar.hidden) {
            gFindBar.getElement("findbar-textbox").value = this.value;
          }

          var fastFind = window.getBrowser().fastFind;
          fastFind.caseSensitive = aMatchCase;

          var result;
          if (fastFind.searchString != this.value) {
            result = fastFind.find(this.value, false);
          }
          else {
            result = fastFind.findAgain(aFindBackwards, false);
          }

          var stringbundle = document.getBindingParent(this)._searchwpStringBundle;
          switch (result) {
            case 0: // Found
              break;
            case 1: // Not found
              this.setAttribute("notfound", true);
              if (this._notFoundTimeout) {
                clearTimeout(this._notFoundTimeout);
              }

              this._notFoundTimeout = setTimeout(function(aToken, aEvent) {
                aToken.removeAttribute("notfound");
              }, 3000, this);

              gSearchWP.displayMessage(stringbundle.getFormattedString("notFound", [this.value], 1), true);
              break;
            case 2: // Wrapped
              if (aFindBackwards) {
                gSearchWP.displayMessage(stringbundle.getString("wrappedToBottom"), true);
              }
              else {
                gSearchWP.displayMessage(stringbundle.getString("wrappedToTop"), true);
              }
              break;
          }
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="mousedown" phase="capturing"><![CDATA[
        event.stopPropagation();
      ]]></handler>

      <handler event="click" phase="capturing"><![CDATA[
        event.stopPropagation();
        if (event.button == 2) {
          event.preventDefault();

          var popup = document.getAnonymousElementByAttribute(
                      document.getBindingParent(this), "anonid", "tokens-menu-popup");
          if (popup.state != "open"){
            document.getBindingParent(this).focus();
            document.getBindingParent(this).select();
            return;
          }
        }

        var findBackwards = event.shiftKey;
        if (event.button >= 1 && event.button <= 2) {
          findBackwards = !findBackwards;
        }

        var matchCase = event.altKey || event.ctrlKey;

        this._findFast(findBackwards, matchCase);
      ]]></handler>
    </handlers>
  </binding>
</bindings>
